# vscode defaults, saved data directory
.vscode/
data/
utils/xkcd_cache.json

# The price I pay for stupidity & using a combination of js files + sh files instead of a setup.py
package-lock.json
package.json
node_utils/

# to-do list
TODO

# I have no goddamn clue what this folder does or what generates it, nor do I feel like I care
# enough to bother to find out
target/

# file so that linter stops shouting at me for errors
.jshintrc

# Defaults from the GitHub template
# lightly pruned


# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
*.cpython-39.pyc

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.env.save
pyvenv.cfg
